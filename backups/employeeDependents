const pool = require('./dbConfig.js');
const auth = require('./authToken.js');

const createDependent = async (req, res) => {
    try {
      auth.authenticateToken(req, res, ['HR Manager', 'Admin'], async () => {
        const { dependent_id, dependent_name, Relationship, Gender, IsCoveredByInsurance, employee_id } = req.body;
        await pool.query(
          'INSERT INTO EmployeeDependents (dependent_id, dependent_name, Relationship, Gender, IsCoveredByInsurance, employee_id) VALUES (?,?,?,?,?,?)',
          [dependent_id, dependent_name, Relationship, Gender, IsCoveredByInsurance, employee_id]
        );
        res.status(201).json({ message: 'Dependent created' });
      });
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'Creation failed' });
    }
  };

  
  const getDependents = async (req, res) => {
    try {
      auth.authenticateToken(req, res, ['HR Manager', 'Admin'], async () => {
        const [data] = await pool.query('SELECT * FROM EmployeeDependents');
        res.json(data);
      });
    } catch (error) {
      res.status(500).json({ error: 'Database query failed' });
    }
  };

  

  const deleteDependent = async (req, res) => {
    const { dependent_id } = req.body;
    try {
      auth.authenticateToken(req, res, ['HR Manager', 'Admin'], async () => {
        await pool.query('DELETE FROM EmployeeDependents WHERE dependent_id = ?', [dependent_id]);
        res.status(200).json({ message: 'Dependent deleted' });
      });
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'Deletion failed' });
    }
  };

  
  const updateDependent = async (req, res) => {
    const { dependent_id, dependent_name, Relationship, Gender, IsCoveredByInsurance, employee_id } = req.body;
    try {
      auth.authenticateToken(req, res, ['HR Manager', 'Admin'], async () => {
        await pool.query(
          'UPDATE EmployeeDependents SET dependent_name = ?, Relationship = ?, Gender = ?, IsCoveredByInsurance = ?, employee_id = ? WHERE dependent_id = ?',
          [dependent_name, Relationship, Gender, IsCoveredByInsurance, employee_id, dependent_id]
        );
        res.status(200).json({ message: 'Dependent updated' });
      });
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'Updating failed' });
    }
  };

  
  module.exports = {
    createDependent,
    getDependents,
    deleteDependent,
    updateDependent
  };
  